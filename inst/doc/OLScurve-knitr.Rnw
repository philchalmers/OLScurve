\documentclass[doc]{apa6}
\usepackage{philsapa6style}
% \VignetteIndexEntry{An Introduction to OLScurve}

\newcommand{\m}[1]{\mathbf{#1}}
\newcommand{\R}[1]{\texttt{#1}}

\title{Ordinary Least Squares Growth Curves in R}
\shorttitle{OLS Growth Curves in R}
\author{R.\ Philip Chalmers}
\affiliation{Department of Psychology \\ York University}
%\authornote{}

%\abstract{}
%\keywords{}

\bibliography{OLScurve-knitr}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\cite[e.g.,][p.~11]{Jones01,Ross87} -> (e.g., Jones, 2001; Ross, 1987, p. 11)
%\citeA[e.g.,][p.~11]{Jones01,Ross87} ->  e.g., Jones (2001); Ross (1987, p. 11)
%\citeNP[e.g.,][says]{Jones01} -> e.g., Jones et al., 2001, says
%\citeauthor{Jones01} -> %Jones et al.
%\citeyear{Jones01} ->  2001
%\citeAs{Jones01} -> Jones's (2001)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\SweaveOpts{fig.align='center'}

%%%%%Uncomment to make Sweave like
%\renewcommand{\hlfunctioncall}{}
%\renewcommand{\hlkeyword}{}
%\SweaveOpts{fig.align='center', prompt=TRUE, message=FALSE, comment=NA}
%<<master, echo=FALSE>>=
%knitr::knit_theme$set("print")
%@

\maketitle

Latent growth curve modeling within the structural equation modeling (SEM) framework has become a popular methodology for analyzing longitudinal data. In latent curve models (LCMs), structural variables are defined in a way that creates unobservable trajectory components that are useful for modeling how individuals or events grow over time. One of the main benefits to using LCMs is that any existing SEM software capable of estimating parameters with full-information methods (with mean structure) can be used to estimate LCMs, incidentally inheriting all of the powerful and commonly used diagnostic tools found in SEM software. While full-information estimators are widely available in commercial software, another potentially useful algorithm for estimating individual trajectories is to use ordinary least squares (OLS) estimation for each individual case, and collecting these estimates to make inferences about the latent trajectory parameters. This technique is available in any statistical software that is capable of estimating ordinary linear regression models, and a user defined macro has already been written for SAS software by \citeA{CarrigWirthCurran2004}. In this article, we shall demonstrate how similar results can be obtained in R \cite{R2011}.

As \citeA{BollenCurran2006} note, there are a variety of advantages to using the case-by-case approach for estimating trajectory parameters. First of all, OLS estimation is intuitively appealing, making it a good pedagogical tool for introducing how to model trajectories, and illuminates many essential conditions and assumptions necessary for LCMs. Second, prediction of the parameters for individual trajectory estimates are calculated for each case in the sample, which can lead to several diagnostics by statistical and graphical means. Also, summary statistics can be computed for these estimates (which can also be graphically portrayed) and if need be these estimates can be analyzed further by other statistical frameworks.

Unfortunately there are also several limitation to OLS estimation for LCMs, namely: overall tests of fit are not readily available, the structure of the error variances must be unrealistically constrained to estimate a pooled standard error, the latent factors cannot be regressed without error on other exogenous or time-varying variables, and analytic significance tests are often not readily available \cite{BollenCurran2006}. However, OLS estimation may still be useful in the preliminary stages of latent curve modeling for (a) selecting appropriate functional forms of growth, (b) examining unconditional population homogeneity, (c) observing whether the relationship between growth factors are linear, and for (d) detecting influential outliers \cite{CarrigWirthCurran2004,Rogosa1994}.

\section{Parameter Estimation of OLS Curve Models}

OLS estimation begins by estimating $N$ OLS regression models, one for each case in the sample. In the case of a linear functional form of growth, the model estimated for each case is

\begin{equation}\label{eqn:traj1}
    y_{it}= \alpha_i + \lambda_t \beta_i + \epsilon_{it}
\end{equation}
with
\begin{eqnarray}\label{eqn:alphamean}
    \alpha_i = \mu_\alpha + \zeta_{\alpha i} \\
    \beta_i = \mu_\beta + \zeta_{\beta i}
\end{eqnarray}
where $y_{it}$ is the value of the repeated measure for individual $i$ at time $t$, $\alpha_i$ is the regression intercept for individual $i$, $\lambda_t$ is the value of the user specified coding of time at time $t$, $\beta_i$ describes linear change over time in $y$ for individual $i$, and $\epsilon_{it}$ is the
time-specific regression residual for individual $i$. The OLS estimator of slope for each case reduces to

\begin{equation}\label{eqn:betacalc}
    \hat{\beta}_i = \frac{\sum_{t=1}^T (\lambda_t - \bar{\lambda})(y_{it} - \bar{y}_i)}
    {\sum_{t=1}^T (\lambda_t - \bar{\lambda})^2}
\end{equation}
and the OLS estimator of intercept for each case reduces to
\begin{equation}\label{eqn:alphacalc}
    \hat{\alpha}_i = \bar{y}_{it} - \hat{\beta}_i\bar{\lambda}
\end{equation}

Standard errors for any group mean ($\hat{\mu}_\psi$) are available and can be calculated as
\begin{equation}\label{eqn:paramstderror}
    \text{s.e.}(\hat{\mu}_\psi) = \sqrt{\frac{\sum(\hat{\psi}_i - \hat{\mu}_\psi)^2 / (N-1)}{N}}
\end{equation}
These estimates may also be useful in hypothesis testing situations for determining which mean trajectory parameters would be useful to model.

The variances of the trajectory parameters can be calculated using the sample variance estimates of the individual trajectories, however these values are biased representations of the population variance parameters. Though formulae for the correction of linear trajectory parameters do exist \cite[see][]{Rogosa1994} they are not implemented in any \R{OLScurve.R} functions. However, users can still make use of the unadjusted variance estimates by treating them as \emph{upper bounds} of the true variance parameters. This interpretation is possible because the calculation of the variances from the trajectory parameters does not account for errors in the estimation at the case-by-case level, but if case-by-case errors were known, or could be approximated, then they would simply remove a portion of variance due to the inherent error in predicting the individual trajectories \cite[see][p.\ 28]{BollenCurran2006}. Hence accounting for the case level errors only serves to (potentially) lower the group variance estimates.

\section{\emph{OLScurve} in R}

The primary function for creating objects from the \R{OLScurve} package is, perhaps unsurprisingly, the \R{OLScurve()} function, which requires two basic inputs: a formula with the keywords $y$ for the DV and $time$ for the time dependent functional form of growth, and a data-set containing only the unconditional growth variables with the individual trajectories in the rows. \R{OLScurve()} contains an additional input parameter, \R{time}, which specifies the time difference in the sequentially recorded occasions, where by default the variables are assumed to be equally spaced (e.g., \R{time = 0,1,2,3,$\ldots$,T-1}).

The \R{OLScurve} functions also subtly improves upon various areas in the SAS macro created by \citeA{CarrigWirthCurran2004}. The first feature added is that \R{OLScurve()} can model a wide variety of growth functional forms, whereas the SAS macro can only model linear and quadratic growth. For example, consider the following \R{formula} specified functional forms, which when combined with the ability for the user to specify the time metric allows for flexible modeling of individual trajectories:
\begin{itemize}
  \item Linear $\rightarrow$ \R{ $\sim$ time}
  \item Cubic Polynomial $\rightarrow$ \R{ $\sim$ time + I(time\^{}2) + I(time\^{}3)}
  \item Square-root $\rightarrow$ \R{ $\sim$ sqrt(time)}
  \item Exponential $\rightarrow$ \R{ $\sim$ exp(time)}
  \item Combination $\rightarrow$ \R{ $\sim$ time + I(time\^{}2) + sqrt(time)}
\end{itemize}
The next improvement can be found in the \R{print(object)} function, which produces summary statistics for the entire data or by groups to observe sample homogeneity. Here the pooled standard error estimate is printed, as well as the standard errors for the mean trajectories and covariances for the entire data, potentially partitioned into groups.

All of the graphical capabilities from the SAS macro have been ported to R with some modifications to better represent the data when a conditional grouping variable is of interest, and new graphical features have been added to allow further probing of the case-by-case trajectory estimates. These feature capitalize on the powerful and flexible trellis based graphical package \R{lattice} \cite{Sakar2008}. To begin, the generic \R{plot(OLSobject)} function produces the individual trajectories for each grouping variable onto a single plot, useful for comparing the homogeneity of slopes and intercepts between groups. The \R{subjplot(OLSobject)} function creates a grid of the case-by-case trajectories superimposed over the raw data, and this is useful to determine visually how well each trajectory predicts each case. Finally, \R{parplot(OLSobject)} produces graphics for observing the estimated parameters values, displaying either histograms, box-plots, or scatter-plot matrices.

\subsection{Nonlinear Factor Relationship Example}

A short example of the functions available in \R{OLScurve.R} is presented here that demonstrates how to detect nonlinear relationships between latent factors. A data set entitled \R{nonlindata} consisting of $N=500$ trajectories with four distinct and equally spaced time-dependent variables was simulated from the parameters $\mu_\alpha = 0$, VAR$(\alpha) = 3$, $\mu_\beta = 0$, VAR$(\beta) = 3$, $\zeta_\alpha = \zeta_\beta = \epsilon_i = N\sim(0,0.2)$. However, the relationship between the $\alpha$ and $\beta$ parameters was specified to be that of a U-shaped relationship; specifically, $\beta = z_\alpha\sqrt{\text{VAR}(\beta)} + \mu_\beta$, where $z_\alpha$ represents the z-score standardization of $|\alpha|^2$. After simulating data with these parameters a random component was added to each value to represent random error ($N\sim(0,1)$). For didactic reasons, a hypothetical grouping variable `gender' was created to demonstrate how the functions can accommodate nominal grouping variables.

Although we should suspect that a linear growth model would be best for these data, a quadratic relationship is tested first.

<<loadquad>>=
library("OLScurve")
data(nonlin.example)
mod.quad <- OLScurve( ~ time + I(time^2), data = nonlin.example)
mod.quad
@

We observe from the output that the mean trajectory for the quadratic factor is not of great magnitude, and in fact fails to reach significance at the group level ($z \approx -0.001/0.022 = 0.045$, $p=.51$). We also observe that there is relatively little variance in the quadratic factor, so the conclusion not use a quadratic term appears to be corroborated. We now compose a linear trajectory model, determine if there are any major differences between the grouping variables, and observe how well this model fits the data at the individual trajectory level.

<<echo=TRUE, eval=FALSE>>=
mod.lin <- OLScurve( ~ time, data = nonlin.example)
subjplot(mod.lin)
@

<<echo=FALSE>>=
mod.lin <- OLScurve( ~ time, data = nonlin.example)
mod.lin2 <- OLScurve( ~ time, data = nonlin.example[1:49,])
@


<<subjplot, echo=FALSE, fig.width=6, fig.cap='First 49 cases from subjplot.'>>=
subjplot(mod.lin2, layout = c(7,7), prompt = FALSE)
@

Additionally, we observe how the trajectory plots are related to gender using a \R{print} and \R{plot} function. However after inspecting these plots and coefficients there does not appear to be any major functional differences between males and females.

<<printmod-lin>>=
print(mod.lin, group = gender)
@

<<plotmod-lin, fig.cap='Group allocated plot of the estimated trajectories.', fig.width=5, fig.height=5>>=
plot(mod.lin, group=gender)
@

Next, we use a scatter-plot matrix graphic (Figure~\ref{fig:splom}) to determine whether the assumption of linearity between trajectory parameters is tenable. Although comparing trajectory parameter relationships does not appear to be common practice according to texts on latent curve modeling \cite[e.g.,][]{BollenCurran2006} it is nonetheless an important area that should be probed to ensure that a proper LCM model has been fit to the data. For example, if one were to use Mplus \cite{Muth'enMuth'en2008} to fit a linear LCM to this simulated data they would find that the overall model fit extremely well, $\chi^2(5) = 3.652,\, p = .60$, where the correlation between the slope and intercept factors is $r_{\alpha\beta} = 0.053,\, z = 1.150,\, p = .25$. However, graphical inspection of the OLS parameters using \R{parplot()} reveals that even though the overall model fit may be excellent the conclusion that the intercept and slope are unrelated is far from correct (although it is true that there is no \emph{linear} relationship). It appears that individuals with higher \emph{and} lower initial intercepts tend to have larger slope trajectories, whereas those closely centered around the intercept mean have much smaller slopes. Similar conclusions could be drawn from estimating factor scores from the LCM in Mplus or other software, although the choice of which estimation method to employ may make a difference, and unfortunately researchers are often not comfortable analyzing calculated factor scores---perhaps due to the large literature surrounding factor score indeterminacy \cite{Bollen1989,Mulaik2010}.

<<splom, eval=TRUE, fig.width=5, fig.height=5, fig.cap='Scatter-plot matrix between the intercept and slope parameter estimates.'>>=
parplot(mod.lin, type = 'splom')
@

\section{Discussion}

As was demonstrated above, R now has the ability to comfortably implement OLS growth curves with the help of the \R{OLScurve.R} source code, and improves upon \citeAs{CarrigWirthCurran2004} SAS macro. Plotting the case-by-case trajectories has been substantially condensed to allow for viewing multiple cases per graph, compared to the SAS macro which plots one case per graphic, and other high quality graphics have been made available from the \R{lattice} package to facilitate analysis. The flexibility of model specification has also been greatly improved, since \R{OLScurve()} is not limited to modeling only linear and quadratic growth curves. Additionally the object returned by \R{OLScurve()} may have its individual elements extracted for further analyses that were not contained in the source code. Finally, and for completeness, selections of cases (via row extraction) defined by the user to allow sub-groupings to be analyzed separately is possible by simply extracting which rows in the \R{data} input are to be grouped and placing them in separate \R{matrix} or \R{data.frame} objects.

In conclusion, OLS estimation can be used to evaluate many important and often overlooked model assumptions. Visually presenting estimates of individual growth trajectories allows for the identification of cases for which the selected functional form of growth may not characterize the manifest data, and further examination of these cases could reveal that these cases are indeed outliers. In this way, OLS estimation can be used either as a screening tool or as a post-hoc diagnostic tool to assess model misfit \cite{CarrigWirthCurran2004}. We hope that the range of flexibility offered by the \R{OLScurve} functions prove useful for researchers---who may or may not be regular R users---interested in broadening their latent curve modeling toolbox.

\newpage
\printbibliography

\end{document}
